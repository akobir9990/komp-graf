<!DOCTYPE html>
<html
  xmlns="http://www.w3.org/1999/xhtml"
  lang="en"
  xml:lang="en"
  prefix="dc: http://purl.org/dc/elements/1.1/"
>
  <head>
    <meta
      name="author"
      content="Created with Hot Potatoes by Half-Baked Software, registered to Sevara."
    />
    <meta
      name="keywords"
      content="Hot Potatoes, Hot Potatoes, Half-Baked Software, Windows, University of Victoria"
    />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

    <meta name="dc:creator" content="Sevara" />

    <title> </title>
    <style>
      :root {
        --strFontFace: Geneva, Arial;
        --strFontSize: small;
        --strTextColor: #000000;
        --strTitleColor: #000033;

        --strFuncLightColor: #ddddf6;
        --strFuncShadeColor: #5d5d77;
        --strLinkColor: #0000ff;
        --strVLinkColor: #0000cc;

        --strNavBarColor: #000066;
        --strNavLightColor: #7f7fb2;
        --strNavShadeColor: #000033;
        --strNavTextColor: #ffffff;

        --strPageBGColor: #ffffff;
        --strExBGColor: #bbbbee;
      }

      body {
        font-family: var(--strFontFace);
        background-color: var(--strPageBGColor);
        color: var(--strTextColor);

        margin-right: 5%;
        margin-left: 5%;
        font-size: var(--strFontSize);
        padding-bottom: 0.5em;
      }

      p {
        text-align: left;
        margin: 0px;
        font-size: 1em;
      }

      table,
      div,
      span,
      td {
        font-size: 1em;
        color: var(--strTextColor);
      }

      div.Titles {
        padding: 0.5em;
        text-align: center;
        color: var(--strTitleColor);
      }

      button {
        font-family: var(--strFontFace);
        font-size: 1em;
        display: inline;
      }

      .ExerciseTitle {
        font-size: 140%;
        color: var(--strTitleColor);
      }

      .ExerciseSubtitle {
        font-size: 120%;
        color: var(--strTitleColor);
      }

      div.StdDiv,
      div.ExerciseContainer,
      div.ReadingContainer {
        background-color: var(--strExBGColor);
        text-align: center;
        font-size: 1em;
        color: var(--strTextColor);
        padding: 0.5em;
        border-style: solid;
        border-width: 1px 1px 1px 1px;
        border-color: var(--strTextColor);
        margin-bottom: 1px;
      }

      div.ReadingContainer,
      div.ExerciseContainer {
        min-width: 15em;
        flex-grow: 1;
        flex-basis: 0;
        margin: 1px;
      }

      div#ContainerDiv {
        margin: -1px;
        padding: 0;
        border: none;
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
        justify-content: space-between;
      }
      .RTLText {
        text-align: right;
        font-size: 150%;
        direction: rtl;
        font-family: "Simplified Arabic", "Traditional Arabic",
          "Times New Roman", var(--strFontFace);
      }

      .CentredRTLText {
        text-align: center;
        font-size: 150%;
        direction: rtl;
        font-family: "Simplified Arabic", "Traditional Arabic",
          "Times New Roman", var(--strFontFace);
      }

      button p.RTLText {
        text-align: center;
      }

      .RTLGapBox {
        text-align: right;
        font-size: 150%;
        direction: rtl;
        font-family: "Times New Roman", var(--strFontFace);
      }

      .Guess {
        font-weight: bold;
      }

      .CorrectAnswer {
        font-weight: bold;
      }

      div#Timer {
        padding: 0.25em;
        margin-left: auto;
        margin-right: auto;
        text-align: center;
        color: var(--strTitleColor);
      }

      span#TimerText {
        padding: 0.25em;
        border-width: 1px;
        border-style: solid;
        font-weight: bold;
        display: none;
        color: var(--strTitleColor);
      }

      span.Instructions {
      }

      div.ExerciseText {
      }

      .FeedbackText,
      .FeedbackText span.CorrectAnswer,
      .FeedbackText span.Guess,
      .FeedbackText span.Answer {
        color: var(--strTitleColor);
      }

      .LeftItem {
        font-size: 1em;
        color: var(--strTextColor);
        text-align: left;
      }

      .RightItem {
        font-weight: bold;
        font-size: 1em;
        color: var(--strTextColor);
        text-align: left;
      }

      span.CorrectMark {
      }

      input,
      textarea {
        font-family: var(--strFontFace);
        font-size: 120%;
      }

      select {
        font-size: 1em;
      }

      div.Feedback {
        background-color: var(--strPageBGColor);
        left: 33%;
        width: 34%;
        top: 33%;
        z-index: 1;
        border-style: solid;
        border-width: 1px;
        padding: 5px;
        text-align: center;
        color: var(--strTitleColor);
        position: absolute;
        display: none;
        font-size: 1em;
      }

      div.ExerciseDiv {
        color: var(--strTextColor);
      }

      table.MatchTable {
        margin: 2em auto;
        border-width: 0;
      }
      table.FlashcardTable {
        background-color: transparent;
        color: var(--strTextColor);
        border-color: var(--strTextColor);
        margin-left: auto;
        margin-right: auto;
        margin-top: 2em;
        margin-bottom: 2em;
        position: relative;
        text-align: center;
        padding: 0px;
      }

      table.FlashcardTable tr {
        border-style: none;
        margin: 0px;
        padding: 0px;
        background-color: var(--strExBGColor);
      }

      table.FlashcardTable td.Showing {
        font-size: 140%;
        text-align: center;
        width: 50%;
        display: table-cell;
        padding: 2em;
        margin: 0px;
        border-style: solid;
        border-width: 1px;
        border-radius: 0.5em;
        color: var(--strTextColor);
        box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
        background-color: var(--strPageBGColor);
      }

      table.FlashcardTable td.Hidden {
        display: none;
      }

      div.JMixDrag,
      div.JMatchDrag {
        padding: 0;
        background-color: var(--strPageBGColor);
        border-style: none;
      }

      div#GuessDiv {
        padding: 0.5em;
        margin-bottom: 2em;
      }

      div#SegmentDiv {
        margin-top: 2em;
        margin-bottom: 2em;
        text-align: center;
      }

      a.ExSegment {
        font-size: 120%;
        font-weight: bold;
        text-decoration: none;
        color: var(--strTextColor);
        display: inline-block;
        padding: 0.5em;
        border: solid 1pt gray;
        margin-bottom: 0.5em;
      }

      span.RemainingWordList {
        font-style: italic;
      }

      div.DropLine {
        position: absolute;
        text-align: left;
        border-bottom-style: solid;
        border-bottom-width: 1px;
        border-bottom-color: var(--strTitleColor);
        width: 80%;
        left: 10%;
      }

      .ClozeWordList {
        text-align: center;
        font-weight: bold;
      }

      div.ClozeBody {
        text-align: left;
        margin-top: 2em;
        margin-bottom: 2em;
        line-height: 2;
      }

      span.GapSpan {
        font-weight: bold;
      }

      table.CrosswordGrid {
        margin: auto auto 1em auto;
        border-collapse: collapse;
        padding: 0px;
        background-color: #000000;
      }

      table.CrosswordGrid tbody tr td {
        width: 1.5em;
        height: 1.5em;
        text-align: center;
        vertical-align: middle;
        font-size: 140%;
        padding: 1px;
        margin: 0px;
        border-style: solid;
        border-width: 1px;
        border-color: #000000;
        color: #000000;
      }

      table.CrosswordGrid span {
        color: #000000;
      }

      table.CrosswordGrid td.BlankCell {
        background-color: #000000;
        color: #000000;
      }

      table.CrosswordGrid td.LetterOnlyCell {
        text-align: center;
        vertical-align: middle;
        background-color: #ffffff;
        color: #000000;
        font-weight: bold;
      }

      table.CrosswordGrid td.NumLetterCell {
        text-align: left;
        vertical-align: top;
        background-color: #ffffff;
        color: #000000;
        padding: 1px;
        font-weight: bold;
      }

      .NumLetterCellText {
        cursor: pointer;
        color: #000000;
      }

      .GridNum {
        vertical-align: super;
        font-size: 66%;
        font-weight: bold;
        text-decoration: none;
        color: #000000;
      }

      .GridNum:hover,
      .GridNum:visited {
        color: #000000;
      }

      table#Clues {
        margin: auto;
        vertical-align: top;
      }

      table#Clues td {
        vertical-align: top;
      }

      table.ClueList {
        margin: auto;
      }

      td.ClueNum {
        text-align: right;
        font-weight: bold;
        vertical-align: top;
      }

      td.Clue {
        text-align: left;
      }

      div#ClueEntry {
        text-align: left;
        margin-bottom: 1em;
      }

      div.Keypad {
        text-align: center;
        display: none;
        margin-bottom: 0.5em;
      }

      div.Keypad button {
        font-family: var(--strFontFace);
        font-size: 120%;
        background-color: #ffffff;
        color: #000000;
        width: 2em;
        border-style: solid;
        border-width: 1px;
        border-radius: 0.5em;
        color: var(--strTextColor);
        box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
      }

      div.QuestionNavigation {
        text-align: center;
      }

      .QNum {
        margin: 0em 1em 0.5em 1em;
        font-weight: bold;
        vertical-align: middle;
      }

      textarea {
        font-family: var(--strFontFace);
      }

      .QuestionText {
        text-align: left;
        margin: 0px;
        font-size: 1em;
      }

      .Answer {
        font-size: 120%;
      }

      .PartialAnswer {
        font-size: 120%;
        letter-spacing: 0.1em;
        color: var(--strTitleColor);
      }

      .Highlight {
        color: #000000;
        background-color: #ffff00;
        font-weight: bold;
        font-size: 120%;
      }

      ol.QuizQuestions {
        text-align: left;
        list-style-type: none;
      }

      li.QuizQuestion {
        padding: 1em;
        border-style: solid;
        border-width: 0px 0px 1px 0px;
      }

      ol.MCAnswers {
        text-align: left;
        list-style-type: upper-alpha;
        padding: 1em;
      }

      ol.MCAnswers li {
        margin-bottom: 1em;
      }

      ol.MSelAnswers {
        text-align: left;
        list-style-type: lower-alpha;
        padding: 1em;
      }

      div.ShortAnswer {
        padding: 1em;
      }

      .FuncButton {
        border-style: solid;
        border-radius: 0.5em;
        padding: 0.5em;
        min-width: 3em;

        border-left-color: var(--strFuncLightColor);
        border-top-color: var(--strFuncLightColor);
        border-right-color: var(--strFuncShadeColor);
        border-bottom-color: var(--strFuncShadeColor);
        color: var(--strTextColor);
        background-color: var(--strExBGColor);

        border-width: 1pt;
        cursor: pointer;
        box-shadow: 0.2em 0.3em 0.2em var(--strFuncShadeColor);
      }

      .FuncButton:active {
        box-shadow: none;
      }

      .FuncButton:hover {
        color: var(--strExBGColor);
        background-color: var(--strTextColor);
      }

      div.NavButtonBar {
        background-color: var(--strNavBarColor);
        text-align: center;
        margin: 0.25rem 0;
        clear: both;
        font-size: 1em;
        padding: 0.2em;
        box-sizing: border-box;
      }

      .NavButton {
        border-style: solid;
        border-radius: 0.5em;
        padding: 0.5em;
        min-width: 3em;

        border-left-color: var(--strNavLightColor);
        border-top-color: var(--strNavLightColor);
        border-right-color: var(--strNavShadeColor);
        border-bottom-color: var(--strNavShadeColor);
        background-color: var(--strNavBarColor);
        color: var(--strNavTextColor);

        border-width: 1pt;
        cursor: pointer;
        box-shadow: 0.2em 0.3em 0.2em var(--strNavShadeColor);
      }

      .NavButton:active {
        box-shadow: none;
      }

      .NavButton:hover {
        color: var(--strNavBarColor);
        background-color: var(--strNavTextColor);
      }

      a {
        color: var(--strLinkColor);
      }

      a:visited {
        color: var(--strVLinkColor);
      }

      a:hover {
        color: var(--strLinkColor);
      }

      div.CardStyle {
        position: absolute;
        font-family: var(--strFontFace);
        font-size: 1em;
        border-style: solid;
        border-radius: 0.5em;
        padding: 0.5em;
        min-width: 2em;
        border-width: 1pt;
        color: var(--strTextColor);
        box-shadow: 0.2em 0.3em 0.2em var(--strTextColor);
        background-color: var(--strExBGColor);
        left: -50px;
        top: -50px;
        overflow: visible;
        touch-action: none;
        user-select: none;
        box-sizing: border-box;
      }

      div.CardStyleCentered {
        text-align: center;
      }

      .rtl {
        text-align: right;
        font-size: 140%;
      }
    </style>

    <script>
      function FocusAButton() {
        if (document.getElementById("CheckButton1") != null) {
          document.getElementById("CheckButton1").focus();
        } else {
          if (document.getElementById("CheckButton2") != null) {
            document.getElementById("CheckButton2").focus();
          } else {
            document.getElementsByTagName("button")[0].focus();
          }
        }
      }

      var topZ = 1000;

      function ShowMessage(Feedback) {
        var Output = Feedback + "<br /><br />";
        document.getElementById("FeedbackContent").innerHTML = Output;
        var FDiv = document.getElementById("FeedbackDiv");
        topZ++;
        FDiv.style.zIndex = topZ;
        FDiv.style.top = TopSettingWithScrollOffset(30) + "px";

        FDiv.style.display = "block";

        ShowElements(false, "input");
        ShowElements(false, "select");
        ShowElements(false, "object");
        ShowElements(true, "object", "FeedbackContent");

        setTimeout("document.getElementById('FeedbackOKButton').focus()", 50);
      }

      function ShowElements(Show, TagName, ContainerToReverse) {
        TopNode = document.getElementById(ContainerToReverse);
        var Els;
        if (TopNode != null) {
          Els = TopNode.getElementsByTagName(TagName);
        } else {
          Els = document.getElementsByTagName(TagName);
        }

        for (var i = 0; i < Els.length; i++) {
          if (TagName == "object") {
            if (Show == true) {
              Els[i].style.visibility = "visible";
            } else {
              Els[i].style.visibility = "hidden";
            }
          }
        }
      }

      function HideFeedback() {
        document.getElementById("FeedbackDiv").style.display = "none";
        ShowElements(true, "input");
        ShowElements(true, "select");
        ShowElements(true, "object");
      }

      function PageDim() {
        this.W = 600;
        this.H = 400;
        this.W = document.getElementsByTagName("body")[0].offsetWidth;
        this.H = document.getElementsByTagName("body")[0].offsetHeight;
      }

      var pg = null;

      function GetPageXY(El) {
        var XY = { x: 0, y: 0 };
        while (El) {
          XY.x += El.offsetLeft;
          XY.y += El.offsetTop;
          El = El.offsetParent;
        }
        return XY;
      }

      function GetScrollTop() {
        if (typeof window.pageYOffset == "number") {
          return window.pageYOffset;
        } else {
          if (document.body && document.body.scrollTop) {
            return document.body.scrollTop;
          } else {
            if (
              document.documentElement &&
              document.documentElement.scrollTop
            ) {
              return document.documentElement.scrollTop;
            } else {
              return 0;
            }
          }
        }
      }

      function GetViewportHeight() {
        if (typeof window.innerHeight != "undefined") {
          return window.innerHeight;
        } else {
          if (
            typeof document.documentElement != "undefined" &&
            typeof document.documentElement.clientHeight != "undefined" &&
            document.documentElement.clientHeight != 0
          ) {
            return document.documentElement.clientHeight;
          } else {
            return document.getElementsByTagName("body")[0].clientHeight;
          }
        }
      }

      function TopSettingWithScrollOffset(TopPercent) {
        var T = Math.floor(GetViewportHeight() * (TopPercent / 100));
        return GetScrollTop() + T;
      }

      var InTextBox = false;

      function SuppressBackspace(e) {
        if (InTextBox == true) {
          return;
        }
        thisKey = e.keyCode;

        var Suppress = false;

        if (thisKey == 8) {
          Suppress = true;
          e.preventDefault();
        }
      }

      window.addEventListener("keypress", SuppressBackspace, false);

      function ReduceItems(InArray, ReduceToSize) {
        var ItemToDump = 0;
        var j = 0;
        while (InArray.length > ReduceToSize) {
          ItemToDump = Math.floor(InArray.length * Math.random());
          InArray.splice(ItemToDump, 1);
        }
      }

      function Shuffle(InArray) {
        var Num;
        var Temp = new Array();
        var Len = InArray.length;

        var j = Len;

        for (var i = 0; i < Len; i++) {
          Temp[i] = InArray[i];
        }

        for (i = 0; i < Len; i++) {
          Num = Math.floor(j * Math.random());
          InArray[i] = Temp[Num];

          for (var k = Num; k < j - 1; k++) {
            Temp[k] = Temp[k + 1];
          }
          j--;
        }
        return InArray;
      }

      function WriteToInstructions(Feedback) {
        document.getElementById("InstructionsDiv").innerHTML = Feedback;
      }

      function EscapeDoubleQuotes(InString) {
        return InString.replace(/"/g, "&quot;");
      }

      function TrimString(InString) {
        var x = 0;

        if (InString.length != 0) {
          while (
            InString.charAt(InString.length - 1) == "\u0020" ||
            InString.charAt(InString.length - 1) == "\u000A" ||
            InString.charAt(InString.length - 1) == "\u000D"
          ) {
            InString = InString.substring(0, InString.length - 1);
          }

          while (
            InString.charAt(0) == "\u0020" ||
            InString.charAt(0) == "\u000A" ||
            InString.charAt(0) == "\u000D"
          ) {
            InString = InString.substring(1, InString.length);
          }

          while (InString.indexOf("  ") != -1) {
            x = InString.indexOf("  ");
            InString =
              InString.substring(0, x) +
              InString.substring(x + 1, InString.length);
          }

          return InString;
        } else {
          return "";
        }
      }

      function FindLongest(InArray) {
        if (InArray.length < 1) {
          return -1;
        }

        var Longest = 0;
        for (var i = 1; i < InArray.length; i++) {
          if (InArray[i].length > InArray[Longest].length) {
            Longest = i;
          }
        }
        return Longest;
      }

      var selObj = null;

      SelObj = function (box) {
        this.box = box;
        this.selStart = this.box.selectionStart;
        this.selEnd = this.box.selectionEnd;
        this.selText = this.box.value.substring(this.selStart, this.selEnd);
        return this;
      };

      function setSelText(newText) {
        var caretPos = this.selStart + newText.length;
        var newValue = this.box.value.substring(0, this.selStart);
        newValue += newText;
        newValue += this.box.value.substring(
          this.selEnd,
          this.box.value.length
        );
        this.box.value = newValue;
        this.box.setSelectionRange(caretPos, caretPos);
        this.box.focus();
      }
      SelObj.prototype.setSelText = setSelText;

      function setSelSelectionRange(start, end) {
        this.box.setSelectionRange(start, end);
      }
      SelObj.prototype.setSelSelectionRange = setSelSelectionRange;

      function IsCombiningDiacritic(CharNum) {
        var Result =
          (CharNum >= 0x0300 && CharNum <= 0x370) ||
          (CharNum >= 0x20d0 && CharNum <= 0x20ff);
        Result =
          Result ||
          (CharNum >= 0x3099 && CharNum <= 0x309a) ||
          (CharNum >= 0xfe20 && CharNum <= 0xfe23);
        return Result;
      }

      function IsCJK(CharNum) {
        return CharNum >= 0x3000 && CharNum < 0xd800;
      }

      function ClearTextBoxes() {
        var NList = document.getElementsByTagName("input");
        for (var i = 0; i < NList.length; i++) {
          if (
            NList[i].id.indexOf("Guess") > -1 ||
            NList[i].id.indexOf("Gap") > -1
          ) {
            NList[i].value = "";
          }
          if (NList[i].id.indexOf("Chk") > -1) {
            NList[i].checked = "";
          }
        }
      }
      var CurrQNum = 0;
      var CorrectIndicator = "&#x2714;";
      var IncorrectIndicator = "&#x2718;";
      var YourScoreIs = "Your score is ";

      var CompletedSoFar = "Questions completed so far: ";
      var ExerciseCompleted = "You have completed the exercise.";
      var ShowCompletedSoFar = true;

      var ContinuousScoring = true;
      var CorrectFirstTime = "Questions answered correctly first time: ";
      var ShowCorrectFirstTime = false;
      var ShuffleQs = false;
      var ShuffleAs = false;
      var DefaultRight = "Correct!";
      var DefaultWrong = "Sorry! Try again.";
      var QsToShow = 10;
      var Score = 0;
      var Finished = false;
      var Qs = null;
      var QArray = new Array();
      var ShowingAllQuestions = false;
      var ShowAllQuestionsCaption = "Show all questions";
      var ShowOneByOneCaption = "Show questions one by one";
      var State = new Array();
      var Feedback = "";
      var TimeOver = false;
      var strInstructions = "";
      var Locked = false;

      var strQuestionFinished = "";

      function CompleteEmptyFeedback() {
        var QNum, ANum;
        for (QNum = 0; QNum < I.length; QNum++) {
          if (I[QNum][2] != "3") {
            for (ANum = 0; ANum < I[QNum][3].length; ANum++) {
              if (I[QNum][3][ANum][1].length < 1) {
                if (I[QNum][3][ANum][2] > 0) {
                  I[QNum][3][ANum][1] = DefaultRight;
                } else {
                  I[QNum][3][ANum][1] = DefaultWrong;
                }
              }
            }
          }
        }
      }

      function SetUpQuestions() {
        var AList = new Array();
        var QList = new Array();
        var i, j;
        Qs = document.getElementById("Questions");
        while (Qs.getElementsByTagName("li").length > 0) {
          QList.push(Qs.removeChild(Qs.getElementsByTagName("li")[0]));
        }
        var DumpItem = 0;
        if (QsToShow > QList.length) {
          QsToShow = QList.length;
        }
        while (QsToShow < QList.length) {
          DumpItem = Math.floor(QList.length * Math.random());
          for (j = DumpItem; j < QList.length - 1; j++) {
            QList[j] = QList[j + 1];
          }
          QList.length = QList.length - 1;
        }
        if (ShuffleQs == true) {
          QList = Shuffle(QList);
        }
        if (ShuffleAs == true) {
          var As;
          for (var i = 0; i < QList.length; i++) {
            As = QList[i].getElementsByTagName("ol")[0];
            if (As != null) {
              AList.length = 0;
              while (As.getElementsByTagName("li").length > 0) {
                AList.push(As.removeChild(As.getElementsByTagName("li")[0]));
              }
              AList = Shuffle(AList);
              for (j = 0; j < AList.length; j++) {
                As.appendChild(AList[j]);
              }
            }
          }
        }

        for (i = 0; i < QList.length; i++) {
          Qs.appendChild(QList[i]);
          QArray[QArray.length] = QList[i];
        }

        QArray[0].style.display = "";
        for (i = 1; i < QArray.length; i++) {
          QArray[i].style.display = "none";
        }
        SetQNumReadout();

        SetFocusToTextbox();
      }

      function SetFocusToTextbox() {
        if (QArray[CurrQNum].getElementsByTagName("input")[0] != null) {
          QArray[CurrQNum].getElementsByTagName("input")[0].focus();
          if (document.getElementById("CharacterKeypad") != null) {
            document.getElementById("CharacterKeypad").style.display = "block";
          }
        } else {
          if (QArray[CurrQNum].getElementsByTagName("textarea")[0] != null) {
            QArray[CurrQNum].getElementsByTagName("textarea")[0].focus();
            if (document.getElementById("CharacterKeypad") != null) {
              document.getElementById("CharacterKeypad").style.display =
                "block";
            }
          } else {
            if (document.getElementById("CharacterKeypad") != null) {
              document.getElementById("CharacterKeypad").style.display = "none";
            }
          }
        }
      }

      function ChangeQ(ChangeBy) {
        if (CurrQNum + ChangeBy < 0 || CurrQNum + ChangeBy >= QArray.length) {
          return;
        }
        QArray[CurrQNum].style.display = "none";
        CurrQNum += ChangeBy;
        QArray[CurrQNum].style.display = "";
        ShowSpecialReadingForQuestion();
        SetQNumReadout();
        SetFocusToTextbox();
      }

      var HiddenReadingShown = false;
      function ShowSpecialReadingForQuestion() {
        if (document.getElementById("ReadingDiv") != null) {
          if (HiddenReadingShown == true) {
            document.getElementById("ReadingDiv").innerHTML = "";
          }
          if (QArray[CurrQNum] != null) {
            var Children = QArray[CurrQNum].getElementsByTagName("div");
            for (var i = 0; i < Children.length; i++) {
              if (Children[i].className == "HiddenReading") {
                document.getElementById("ReadingDiv").innerHTML =
                  Children[i].innerHTML;
                HiddenReadingShown = true;
                if (document.getElementById("ShowMethodButton") != null) {
                  document.getElementById("ShowMethodButton").style.display =
                    "none";
                }
              }
            }
          }
        }
      }

      function SetQNumReadout() {
        document.getElementById("QNumReadout").innerHTML =
          CurrQNum + 1 + " / " + QArray.length;
        if (CurrQNum + 1 >= QArray.length) {
          if (document.getElementById("NextQButton") != null) {
            document.getElementById("NextQButton").style.visibility = "hidden";
          }
        } else {
          if (document.getElementById("NextQButton") != null) {
            document.getElementById("NextQButton").style.visibility = "visible";
          }
        }
        if (CurrQNum <= 0) {
          if (document.getElementById("PrevQButton") != null) {
            document.getElementById("PrevQButton").style.visibility = "hidden";
          }
        } else {
          if (document.getElementById("PrevQButton") != null) {
            document.getElementById("PrevQButton").style.visibility = "visible";
          }
        }
      }

      var I = new Array();
      I[0] = new Array();
      I[0][0] = 100;
      I[0][1] = "";
      I[0][2] = "0";
      I[0][3] = new Array();
      I[0][3][0] = new Array("aylana", "", 0, 0, 1);
      I[0][3][1] = new Array("yoyiladigan", "", 1, 100, 1);
      I[0][3][2] = new Array("og'ma", "", 0, 0, 1);
      I[0][3][3] = new Array("yoyilmaydigan", "", 0, 0, 1);
      I[1] = new Array();
      I[1][0] = 100;
      I[1][1] = "";
      I[1][2] = "0";
      I[1][3] = new Array();
      I[1][3][0] = new Array("burchaklari", "", 0, 0, 1);
      I[1][3][1] = new Array("qirralari", "", 0, 0, 1);
      I[1][3][2] = new Array("yoqlari", "", 0, 0, 1);
      I[1][3][3] = new Array("yoyilmasi", "", 1, 100, 1);
      I[2] = new Array();
      I[2][0] = 100;
      I[2][1] = "";
      I[2][2] = "0";
      I[2][3] = new Array();
      I[2][3][0] = new Array("kesishmaydigan", "", 0, 0, 1);
      I[2][3][1] = new Array("yoyiladigan", "", 0, 0, 1);
      I[2][3][2] = new Array("kesishadigan", "", 1, 100, 1);
      I[2][3][3] = new Array("yoyilmaydigan", "", 0, 0, 1);
      I[3] = new Array();
      I[3][0] = 100;
      I[3][1] = "";
      I[3][2] = "0";
      I[3][3] = new Array();
      I[3][3][0] = new Array("geodezik", "", 1, 100, 1);
      I[3][3][1] = new Array("taqriban", "", 0, 0, 1);
      I[3][3][2] = new Array("asosiy", "", 0, 0, 1);
      I[3][3][3] = new Array("yordamchi", "", 0, 0, 1);
      I[4] = new Array();
      I[4][0] = 100;
      I[4][1] = "";
      I[4][2] = "0";
      I[4][3] = new Array();
      I[4][3][0] = new Array("prizmatik", "", 0, 0, 1);
      I[4][3][1] = new Array("to'g'ri javob yo'q", "", 0, 0, 1);
      I[4][3][2] = new Array("uchburchakliklar", "", 1, 100, 1);
      I[4][3][3] = new Array("ellipsoid", "", 0, 0, 1);
      I[5] = new Array();
      I[5][0] = 100;
      I[5][1] = "";
      I[5][2] = "0";
      I[5][3] = new Array();
      I[5][3][0] = new Array("uch", "", 1, 100, 1);
      I[5][3][1] = new Array("to'rt", "", 0, 0, 1);
      I[5][3][2] = new Array("ikki", "", 0, 0, 1);
      I[5][3][3] = new Array("olti", "", 0, 0, 1);
      I[6] = new Array();
      I[6][0] = 100;
      I[6][1] = "";
      I[6][2] = "0";
      I[6][3] = new Array();
      I[6][3][0] = new Array("qo'shimcha", "", 0, 0, 1);
      I[6][3][1] = new Array("haqiqiy", "", 1, 100, 1);
      I[6][3][2] = new Array("yordamchi", "", 0, 0, 1);
      I[6][3][3] = new Array("eng kichik", "", 0, 0, 1);
      I[7] = new Array();
      I[7][0] = 100;
      I[7][1] = "";
      I[7][2] = "0";
      I[7][3] = new Array();
      I[7][3][0] = new Array("uchburchak", "", 0, 0, 1);
      I[7][3][1] = new Array("prizma", "", 0, 0, 1);
      I[7][3][2] = new Array("oval", "", 0, 0, 1);
      I[7][3][3] = new Array("tor", "", 1, 100, 1);
      I[8] = new Array();
      I[8][0] = 100;
      I[8][1] = "";
      I[8][2] = "0";
      I[8][3] = new Array();
      I[8][3][0] = new Array("dumalatish", "", 0, 0, 1);
      I[8][3][1] = new Array("uchburchakliklar", "", 0, 0, 1);
      I[8][3][2] = new Array("normal", "", 1, 100, 1);
      I[8][3][3] = new Array("barcha javob to'g'ri", "", 0, 0, 1);
      I[9] = new Array();
      I[9][0] = 100;
      I[9][1] = "";
      I[9][2] = "0";
      I[9][3] = new Array();
      I[9][3][0] = new Array("taqriban", "", 1, 100, 1);
      I[9][3][1] = new Array("haqiqiy uzunlikda", "", 0, 0, 1);
      I[9][3][2] = new Array("yoyilmasi yasalmaydi", "", 0, 0, 1);
      I[9][3][3] = new Array("dumalatish usulida", "", 0, 0, 1);

      function StartUp() {
        if (QsToShow < 2) {
          document.getElementById("QNav").style.display = "none";
        }

        strInstructions = document.getElementById("InstructionsDiv").innerHTML;

        CompleteEmptyFeedback();

        SetUpQuestions();
        ClearTextBoxes();
        CreateStatusArray();

        if (document.location.search.length > 0) {
          if (ShuffleQs == false) {
            var JumpTo =
              parseInt(
                document.location.search.substring(
                  1,
                  document.location.search.length
                )
              ) - 1;
            if (JumpTo <= QsToShow) {
              ChangeQ(JumpTo);
            }
          }
        }
        ShowSpecialReadingForQuestion();
      }

      function ShowHideQuestions() {
        document.getElementById("ShowMethodButton").style.display = "none";
        if (ShowingAllQuestions == false) {
          for (var i = 0; i < QArray.length; i++) {
            QArray[i].style.display = "";
          }
          document.getElementById("Questions").style.listStyleType = "decimal";
          document.getElementById("OneByOneReadout").style.display = "none";
          document.getElementById("ShowMethodButton").innerHTML =
            ShowOneByOneCaption;
          ShowingAllQuestions = true;
        } else {
          for (var i = 0; i < QArray.length; i++) {
            if (i != CurrQNum) {
              QArray[i].style.display = "none";
            }
          }
          document.getElementById("Questions").style.listStyleType = "none";
          document.getElementById("OneByOneReadout").style.display = "";
          document.getElementById("ShowMethodButton").innerHTML =
            ShowAllQuestionsCaption;
          ShowingAllQuestions = false;
        }
        document.getElementById("ShowMethodButton").style.display = "inline";
      }

      function CreateStatusArray() {
        var QNum, ANum;
        for (QNum = 0; QNum < I.length; QNum++) {
          if (document.getElementById("Q_" + QNum) != null) {
            State[QNum] = new Array();
            State[QNum][0] = -1;
            State[QNum][1] = new Array();
            for (ANum = 0; ANum < I[QNum][3].length; ANum++) {
              State[QNum][1][ANum] = 0;
            }
            State[QNum][2] = 0;
            State[QNum][3] = 0;
            State[QNum][4] = 0;
            State[QNum][5] = "";
          } else {
            State[QNum] = null;
          }
        }
      }

      function CheckMCAnswer(QNum, ANum, Btn) {
        if (State[QNum].length < 1) {
          return;
        }

        Feedback = I[QNum][3][ANum][1];

        if (State[QNum][0] > -1) {
          if (strQuestionFinished.length > 0) {
            Feedback += "<br />" + strQuestionFinished;
          }
          ShowMessage(Feedback);
          return;
        }

        Btn.style.display = "none";

        State[QNum][2]++;

        State[QNum][3] += I[QNum][3][ANum][3];

        State[QNum][1][ANum] = State[QNum][2];
        if (State[QNum][5].length > 0) {
          State[QNum][5] += " | ";
        }
        State[QNum][5] += String.fromCharCode(65 + ANum);

        if (I[QNum][3][ANum][2] < 1) {
          Btn.innerHTML = IncorrectIndicator;

          if (Finished == false) {
            WriteToInstructions(strInstructions);
          }

          var RemainingAnswer = FinalAnswer(QNum);
          if (RemainingAnswer > -1) {
            State[QNum][2]++;

            CalculateMCQuestionScore(QNum);

            CalculateOverallScore();
            var QsDone = CheckQuestionsCompleted();
            if (ContinuousScoring == true || Finished == true) {
              Feedback +=
                "<br />" + YourScoreIs + " " + Score + "%." + "<br />" + QsDone;
              WriteToInstructions(
                YourScoreIs + " " + Score + "%." + "<br />" + QsDone
              );
            } else {
              WriteToInstructions(QsDone);
            }
          }
        } else {
          Btn.innerHTML = CorrectIndicator;

          CalculateMCQuestionScore(QNum);

          var QsDone = CheckQuestionsCompleted();

          if (ContinuousScoring == true) {
            CalculateOverallScore();
            if (ContinuousScoring == true || Finished == true) {
              Feedback +=
                "<br />" + YourScoreIs + " " + Score + "%." + "<br />" + QsDone;
              WriteToInstructions(
                YourScoreIs + " " + Score + "%." + "<br />" + QsDone
              );
            }
          } else {
            WriteToInstructions(QsDone);
          }
        }

        Btn.style.display = "inline";

        ShowMessage(Feedback);

        CheckFinished();
      }

      function CalculateMCQuestionScore(QNum) {
        var Tries = State[QNum][2] + State[QNum][4]; //include tries and hint penalties
        var PercentCorrect = State[QNum][3];
        var TotAns = GetTotalMCAnswers(QNum);
        var HintPenalties = State[QNum][4];
        if (State[QNum][0] < 0) {
          if (HintPenalties >= 1) {
            State[QNum][0] = 0;
          } else {
            if (TotAns == 1) {
              State[QNum][0] = 1;
            } else {
              State[QNum][0] =
                (TotAns - (Tries * 100) / State[QNum][3]) / (TotAns - 1);
            }
          }
          if (
            State[QNum][0] < 0 ||
            State[QNum][0] == Number.NEGATIVE_INFINITY
          ) {
            State[QNum][0] = 0;
          }
        }
      }

      function GetTotalMCAnswers(QNum) {
        var Result = 0;
        for (var ANum = 0; ANum < I[QNum][3].length; ANum++) {
          if (I[QNum][3][ANum][4] == 1) {
            Result++;
          }
        }
        return Result;
      }

      function FinalAnswer(QNum) {
        var UnchosenAnswers = 0;
        var FinalAnswer = -1;
        for (var ANum = 0; ANum < I[QNum][3].length; ANum++) {
          if (I[QNum][3][ANum][4] == 1) {
            if (State[QNum][1][ANum] < 1) {
              UnchosenAnswers++;
              FinalAnswer = ANum;
            }
          }
        }
        if (UnchosenAnswers == 1) {
          return FinalAnswer;
        } else {
          return -1;
        }
      }

      function CalculateOverallScore() {
        var TotalWeighting = 0;
        var TotalScore = 0;

        for (var QNum = 0; QNum < State.length; QNum++) {
          if (State[QNum] != null) {
            if (State[QNum][0] > -1) {
              TotalWeighting += I[QNum][0];
              TotalScore += I[QNum][0] * State[QNum][0];
            }
          }
        }
        if (TotalWeighting > 0) {
          Score = Math.floor((TotalScore / TotalWeighting) * 100);
        } else {
          Score = 100;
        }
      }
      function CheckQuestionsCompleted() {
        if (ShowCompletedSoFar == false) {
          return "";
        }
        var QsCompleted = 0;
        for (var QNum = 0; QNum < State.length; QNum++) {
          if (State[QNum] != null) {
            if (State[QNum][0] >= 0) {
              QsCompleted++;
            }
          }
        }
        if (QsCompleted >= QArray.length) {
          return ExerciseCompleted;
        } else {
          return CompletedSoFar + " " + QsCompleted + "/" + QArray.length + ".";
        }
      }

      function CheckFinished() {
        var FB = "";
        var AllDone = true;
        for (var QNum = 0; QNum < State.length; QNum++) {
          if (State[QNum] != null) {
            if (State[QNum][0] < 0) {
              AllDone = false;
            }
          }
        }
        if (AllDone == true) {
          CalculateOverallScore();
          FB = YourScoreIs + " " + Score + "%.";
          if (ShowCorrectFirstTime == true) {
            var CFT = 0;
            for (QNum = 0; QNum < State.length; QNum++) {
              if (State[QNum] != null) {
                if (State[QNum][0] >= 1) {
                  CFT++;
                }
              }
            }
            FB += "<br />" + CorrectFirstTime + " " + CFT + "/" + QsToShow;
          }

          FB += "<br />" + ExerciseCompleted;

          WriteToInstructions(FB);

          Finished == true;

          TimeOver = true;
          Locked = true;

          Finished = true;
          Detail = '<?xml version="1.0"?><hpnetresult><fields>';
          for (QNum = 0; QNum < State.length; QNum++) {
            if (State[QNum] != null) {
              if (State[QNum][5].length > 0) {
                Detail +=
                  "<field><fieldname>Question #" +
                  (QNum + 1) +
                  "</fieldname><fieldtype>question-tracking</fieldtype><fieldlabel>Q " +
                  (QNum + 1) +
                  "</fieldlabel><fieldlabelid>QuestionTrackingField</fieldlabelid><fielddata>" +
                  State[QNum][5] +
                  "</fielddata></field>";
              }
            }
          }
          Detail += "</fields></hpnetresult>";
        }
      }
    </script>
  </head>

  <body onload="StartUp()" id="TheBody">
    <!-- BeginTopNavButtons -->

    <div class="NavButtonBar" id="TopNavBar">
      <button class="NavButton" onclick="location='9.htm'; return false;">
        Previous example
      </button>
    </div>

    <!-- EndTopNavButtons -->

    <div class="Titles">
      <h2 class="ExerciseTitle"></h2>

      <h3 class="ExerciseSubtitle">
        Choose the correct answer for each question.
      </h3>
    </div>

    <div id="InstructionsDiv" class="StdDiv">
      <div id="Instructions"></div>
    </div>

    <div id="ContainerDiv">
      <div class="ExerciseContainer">
        <div id="QNav" class="QuestionNavigation">
          <p style="text-align: right">
            <button
              id="ShowMethodButton"
              class="FuncButton"
              onclick="ShowHideQuestions(); return false;"
            >
              Show all questions
            </button>
          </p>

          <div id="OneByOneReadout">
            <button
              id="PrevQButton"
              class="FuncButton"
              onclick="ChangeQ(-1); return false;"
            >
              &lt;=
            </button>

            <span id="QNumReadout" class="QNum">&#160;</span>

            <button
              id="NextQButton"
              class="FuncButton"
              onclick="ChangeQ(1); return false;"
            >
              =&gt;
            </button>
            <br />
          </div>
        </div>

        <ol class="QuizQuestions" id="Questions">
          <li class="QuizQuestion" id="Q_0" style="display: none">
            <div class="QuestionText">
              Sirtni egilish deformasiyasi yordamida tekislikka aylantirish
              mumkin bo&#x2018;lsa, bunday sirt qanday sirt deyiladi?
            </div>
            <ol class="MCAnswers">
              <li id="Q_0_0">
                <button
                  class="FuncButton"
                  id="Q_0_0_Btn"
                  onclick="CheckMCAnswer(0,0,this)"
                >
                  ?</button
                >&#160;&#160;aylana
              </li>
              <li id="Q_0_1">
                <button
                  class="FuncButton"
                  id="Q_0_1_Btn"
                  onclick="CheckMCAnswer(0,1,this)"
                >
                  ?</button
                >&#160;&#160;yoyiladigan
              </li>
              <li id="Q_0_2">
                <button
                  class="FuncButton"
                  id="Q_0_2_Btn"
                  onclick="CheckMCAnswer(0,2,this)"
                >
                  ?</button
                >&#160;&#160;og'ma
              </li>
              <li id="Q_0_3">
                <button
                  class="FuncButton"
                  id="Q_0_3_Btn"
                  onclick="CheckMCAnswer(0,3,this)"
                >
                  ?</button
                >&#160;&#160;yoyilmaydigan
              </li>
            </ol>
          </li>
          <li class="QuizQuestion" id="Q_1" style="display: none">
            <div class="QuestionText">
              Sirtning biror bo&#x2018;lagining cho&#x2018;zilmasdan,
              yirtilmasdan tekislikka yoyilishidan hosil bo&#x2018;lgan tekis
              shakl uning .......... deyiladi.
            </div>
            <ol class="MCAnswers">
              <li id="Q_1_0">
                <button
                  class="FuncButton"
                  id="Q_1_0_Btn"
                  onclick="CheckMCAnswer(1,0,this)"
                >
                  ?</button
                >&#160;&#160;burchaklari
              </li>
              <li id="Q_1_1">
                <button
                  class="FuncButton"
                  id="Q_1_1_Btn"
                  onclick="CheckMCAnswer(1,1,this)"
                >
                  ?</button
                >&#160;&#160;qirralari
              </li>
              <li id="Q_1_2">
                <button
                  class="FuncButton"
                  id="Q_1_2_Btn"
                  onclick="CheckMCAnswer(1,2,this)"
                >
                  ?</button
                >&#160;&#160;yoqlari
              </li>
              <li id="Q_1_3">
                <button
                  class="FuncButton"
                  id="Q_1_3_Btn"
                  onclick="CheckMCAnswer(1,3,this)"
                >
                  ?</button
                >&#160;&#160;yoyilmasi
              </li>
            </ol>
          </li>
          <li class="QuizQuestion" id="Q_2" style="display: none">
            <div class="QuestionText">
              Yoyiladigan sirtlarga to&#x2018;g&#x2018;ri chiziqli sirtlardan
              faqat yondosh yasovchilari xos yoki xosmas nuqtalarda ...........
              sirtlar kiradi.
            </div>
            <ol class="MCAnswers">
              <li id="Q_2_0">
                <button
                  class="FuncButton"
                  id="Q_2_0_Btn"
                  onclick="CheckMCAnswer(2,0,this)"
                >
                  ?</button
                >&#160;&#160;kesishmaydigan
              </li>
              <li id="Q_2_1">
                <button
                  class="FuncButton"
                  id="Q_2_1_Btn"
                  onclick="CheckMCAnswer(2,1,this)"
                >
                  ?</button
                >&#160;&#160;yoyiladigan
              </li>
              <li id="Q_2_2">
                <button
                  class="FuncButton"
                  id="Q_2_2_Btn"
                  onclick="CheckMCAnswer(2,2,this)"
                >
                  ?</button
                >&#160;&#160;kesishadigan
              </li>
              <li id="Q_2_3">
                <button
                  class="FuncButton"
                  id="Q_2_3_Btn"
                  onclick="CheckMCAnswer(2,3,this)"
                >
                  ?</button
                >&#160;&#160;yoyilmaydigan
              </li>
            </ol>
          </li>
          <li class="QuizQuestion" id="Q_3" style="display: none">
            <div class="QuestionText">
              Sirtga tegishli ikki nuqta orasidagi eng qisqa masofada
              tutashtiruvchi chiziq sirtning qanday chizig&#x2018;i deb ataladi?
            </div>
            <ol class="MCAnswers">
              <li id="Q_3_0">
                <button
                  class="FuncButton"
                  id="Q_3_0_Btn"
                  onclick="CheckMCAnswer(3,0,this)"
                >
                  ?</button
                >&#160;&#160;geodezik
              </li>
              <li id="Q_3_1">
                <button
                  class="FuncButton"
                  id="Q_3_1_Btn"
                  onclick="CheckMCAnswer(3,1,this)"
                >
                  ?</button
                >&#160;&#160;taqriban
              </li>
              <li id="Q_3_2">
                <button
                  class="FuncButton"
                  id="Q_3_2_Btn"
                  onclick="CheckMCAnswer(3,2,this)"
                >
                  ?</button
                >&#160;&#160;asosiy
              </li>
              <li id="Q_3_3">
                <button
                  class="FuncButton"
                  id="Q_3_3_Btn"
                  onclick="CheckMCAnswer(3,3,this)"
                >
                  ?</button
                >&#160;&#160;yordamchi
              </li>
            </ol>
          </li>
          <li class="QuizQuestion" id="Q_4" style="display: none">
            <div class="QuestionText">
              Qaytish qirrali sirtlarning yoyilmalarini yasash ham konus
              sirtlarning yoyilmalarini yasashdagidek qanday usulida bajariladi?
            </div>
            <ol class="MCAnswers">
              <li id="Q_4_0">
                <button
                  class="FuncButton"
                  id="Q_4_0_Btn"
                  onclick="CheckMCAnswer(4,0,this)"
                >
                  ?</button
                >&#160;&#160;prizmatik
              </li>
              <li id="Q_4_1">
                <button
                  class="FuncButton"
                  id="Q_4_1_Btn"
                  onclick="CheckMCAnswer(4,1,this)"
                >
                  ?</button
                >&#160;&#160;to'g'ri javob yo'q
              </li>
              <li id="Q_4_2">
                <button
                  class="FuncButton"
                  id="Q_4_2_Btn"
                  onclick="CheckMCAnswer(4,2,this)"
                >
                  ?</button
                >&#160;&#160;uchburchakliklar
              </li>
              <li id="Q_4_3">
                <button
                  class="FuncButton"
                  id="Q_4_3_Btn"
                  onclick="CheckMCAnswer(4,3,this)"
                >
                  ?</button
                >&#160;&#160;ellipsoid
              </li>
            </ol>
          </li>
          <li class="QuizQuestion" id="Q_5" style="display: none">
            <div class="QuestionText">
              Sirtlarning yoyilmalarini taqribiy yasashning necha usuli mavjud?
            </div>
            <ol class="MCAnswers">
              <li id="Q_5_0">
                <button
                  class="FuncButton"
                  id="Q_5_0_Btn"
                  onclick="CheckMCAnswer(5,0,this)"
                >
                  ?</button
                >&#160;&#160;uch
              </li>
              <li id="Q_5_1">
                <button
                  class="FuncButton"
                  id="Q_5_1_Btn"
                  onclick="CheckMCAnswer(5,1,this)"
                >
                  ?</button
                >&#160;&#160;to'rt
              </li>
              <li id="Q_5_2">
                <button
                  class="FuncButton"
                  id="Q_5_2_Btn"
                  onclick="CheckMCAnswer(5,2,this)"
                >
                  ?</button
                >&#160;&#160;ikki
              </li>
              <li id="Q_5_3">
                <button
                  class="FuncButton"
                  id="Q_5_3_Btn"
                  onclick="CheckMCAnswer(5,3,this)"
                >
                  ?</button
                >&#160;&#160;olti
              </li>
            </ol>
          </li>
          <li class="QuizQuestion" id="Q_6" style="display: none">
            <div class="QuestionText">
              Umuman biror silindrning yoyilmasini yasash uchun: silindr
              yoyilmasida qatnashadigan yasovchilarning qanday uzunliklari
              aniqlanadi?
            </div>
            <ol class="MCAnswers">
              <li id="Q_6_0">
                <button
                  class="FuncButton"
                  id="Q_6_0_Btn"
                  onclick="CheckMCAnswer(6,0,this)"
                >
                  ?</button
                >&#160;&#160;qo'shimcha
              </li>
              <li id="Q_6_1">
                <button
                  class="FuncButton"
                  id="Q_6_1_Btn"
                  onclick="CheckMCAnswer(6,1,this)"
                >
                  ?</button
                >&#160;&#160;haqiqiy
              </li>
              <li id="Q_6_2">
                <button
                  class="FuncButton"
                  id="Q_6_2_Btn"
                  onclick="CheckMCAnswer(6,2,this)"
                >
                  ?</button
                >&#160;&#160;yordamchi
              </li>
              <li id="Q_6_3">
                <button
                  class="FuncButton"
                  id="Q_6_3_Btn"
                  onclick="CheckMCAnswer(6,3,this)"
                >
                  ?</button
                >&#160;&#160;eng kichik
              </li>
            </ol>
          </li>
          <li class="QuizQuestion" id="Q_7" style="display: none">
            <div class="QuestionText">
              Uchburchaklar usuli bilan qirrali sirtlar, konus va .......
              sirtlarning yoyilmalari yasaladi.
            </div>
            <ol class="MCAnswers">
              <li id="Q_7_0">
                <button
                  class="FuncButton"
                  id="Q_7_0_Btn"
                  onclick="CheckMCAnswer(7,0,this)"
                >
                  ?</button
                >&#160;&#160;uchburchak
              </li>
              <li id="Q_7_1">
                <button
                  class="FuncButton"
                  id="Q_7_1_Btn"
                  onclick="CheckMCAnswer(7,1,this)"
                >
                  ?</button
                >&#160;&#160;prizma
              </li>
              <li id="Q_7_2">
                <button
                  class="FuncButton"
                  id="Q_7_2_Btn"
                  onclick="CheckMCAnswer(7,2,this)"
                >
                  ?</button
                >&#160;&#160;oval
              </li>
              <li id="Q_7_3">
                <button
                  class="FuncButton"
                  id="Q_7_3_Btn"
                  onclick="CheckMCAnswer(7,3,this)"
                >
                  ?</button
                >&#160;&#160;tor
              </li>
            </ol>
          </li>
          <li class="QuizQuestion" id="Q_8" style="display: none">
            <div class="QuestionText">
              Yasovchilari yoki qirralari proyeksiya tekisliklariga nisbatan
              og&#x2018;ma vaziyatda bo&#x2018;lgan silindrik yoki prizmatik
              sirtlarning yoyilmalarini qanday kesim usulida yasash osonroqdir?
            </div>
            <ol class="MCAnswers">
              <li id="Q_8_0">
                <button
                  class="FuncButton"
                  id="Q_8_0_Btn"
                  onclick="CheckMCAnswer(8,0,this)"
                >
                  ?</button
                >&#160;&#160;dumalatish
              </li>
              <li id="Q_8_1">
                <button
                  class="FuncButton"
                  id="Q_8_1_Btn"
                  onclick="CheckMCAnswer(8,1,this)"
                >
                  ?</button
                >&#160;&#160;uchburchakliklar
              </li>
              <li id="Q_8_2">
                <button
                  class="FuncButton"
                  id="Q_8_2_Btn"
                  onclick="CheckMCAnswer(8,2,this)"
                >
                  ?</button
                >&#160;&#160;normal
              </li>
              <li id="Q_8_3">
                <button
                  class="FuncButton"
                  id="Q_8_3_Btn"
                  onclick="CheckMCAnswer(8,3,this)"
                >
                  ?</button
                >&#160;&#160;barcha javob to'g'ri
              </li>
            </ol>
          </li>
          <li class="QuizQuestion" id="Q_9" style="display: none">
            <div class="QuestionText">
              Yoyilmaydigan sirtlarning yoyilmalari qanday yasaladi?
            </div>
            <ol class="MCAnswers">
              <li id="Q_9_0">
                <button
                  class="FuncButton"
                  id="Q_9_0_Btn"
                  onclick="CheckMCAnswer(9,0,this)"
                >
                  ?</button
                >&#160;&#160;taqriban
              </li>
              <li id="Q_9_1">
                <button
                  class="FuncButton"
                  id="Q_9_1_Btn"
                  onclick="CheckMCAnswer(9,1,this)"
                >
                  ?</button
                >&#160;&#160;haqiqiy uzunlikda
              </li>
              <li id="Q_9_2">
                <button
                  class="FuncButton"
                  id="Q_9_2_Btn"
                  onclick="CheckMCAnswer(9,2,this)"
                >
                  ?</button
                >&#160;&#160;yoyilmasi yasalmaydi
              </li>
              <li id="Q_9_3">
                <button
                  class="FuncButton"
                  id="Q_9_3_Btn"
                  onclick="CheckMCAnswer(9,3,this)"
                >
                  ?</button
                >&#160;&#160;dumalatish usulida
              </li>
            </ol>
          </li>
        </ol>
      </div>
    </div>
    <div class="Feedback" id="FeedbackDiv">
      <div class="FeedbackText" id="FeedbackContent"></div>
      <button
        id="FeedbackOKButton"
        class="FuncButton"
        onclick="HideFeedback(); return false;"
      >
        &#160;OK&#160;
      </button>
    </div>
    <div class="NavButtonBar" id="BottomNavBar">
      <button
        class="NavButton"
        onclick="location='../index.html'; return false;"
      >
        Back to home page
      </button>
    </div>
  </body>
</html>
